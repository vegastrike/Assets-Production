uniform int light_enabled[gl_MaxLights];
uniform vec4 light_size[gl_MaxLights];
uniform int max_light_enabled;
uniform vec4 detail0Plane;
uniform vec4 detail1Plane;

/* varyings:
 *   gl_TexCoord[...]
 *    0 - tex coord
 *    1 - ws normal
 *    2 - ws tangent
 *    3 - ws binormal
 *    4 - vertex-to-eye direction
 *    5 - vertex-to-light0@xyz, light_size@z
 *    6 - vertex-to-light1@xyz, light_size@z
 *    7 - un-normalized vertex position
 **/

//float selfshadowStep(float VNdotL) { return step(0.0,VNdotL); } // fast but hard selfshadow function
float selfshadowStep(float VNdotL) { return smoothstep(0.0,0.25,VNdotL); } // costly but soft and nice selfshadow function

vec4 lightPosAndSize0(in vec4 vertex)
{
  vec4 lpos = gl_LightSource[0].position;
  vec4 rv;
  rv.xyz    = lpos.xyz - vertex.xyz*lpos.w;
  rv.w      = light_size[0].z;
  return rv;
}
vec4 lightPosAndSize1(in vec4 vertex)
{
  vec4 lpos = gl_LightSource[1].position;
  vec4 rv;
  rv.xyz    = lpos.xyz - vertex.xyz*lpos.w;
  rv.w      = light_size[1].z;
  return rv;
}
vec4 lightPosAndAttenuation2(in vec4 vertex)
{
  vec4 lpos = gl_LightSource[2].position;
  vec4 rv;
  rv.xyz    = lpos.xyz - vertex.xyz*lpos.w;
  float t   = length(rv.xyz);
  rv.xyz   *= (1.0/t);
  rv.w      = 1.0 / dot( vec3(1.0,t,t*t),
                         vec3(gl_LightSource[2].constantAttenuation,
                              gl_LightSource[2].linearAttenuation,
                              gl_LightSource[2].quadraticAttenuation) );
  return rv;
}
vec4 lightPosAndAttenuation3(in vec4 vertex)
{
  vec4 lpos = gl_LightSource[3].position;
  vec4 rv;
  rv.xyz    = lpos.xyz - vertex.xyz*lpos.w;
  float t   = length(rv.xyz);
  rv.xyz   *= (1.0/t);
  rv.w      = 1.0 / dot( vec3(1,t,t*t),
                         vec3(gl_LightSource[3].constantAttenuation,
                              gl_LightSource[3].linearAttenuation,
                              gl_LightSource[3].quadraticAttenuation) );
  return rv;
}
vec4 lightPosAndAttenuation4(in vec4 vertex)
{
  vec4 lpos = gl_LightSource[4].position;
  vec4 rv;
  rv.xyz    = lpos.xyz - vertex.xyz*lpos.w;
  float t   = length(rv.xyz);
  rv.xyz   *= (1.0/t);
  rv.w      = 1.0 / dot( vec3(1,t,t*t),
                         vec3(gl_LightSource[4].constantAttenuation,
                              gl_LightSource[4].linearAttenuation,
                              gl_LightSource[4].quadraticAttenuation) );
  return rv;
}
vec4 lightPosAndAttenuation5(in vec4 vertex)
{
  vec4 lpos = gl_LightSource[5].position;
  vec4 rv;
  rv.xyz    = lpos.xyz - vertex.xyz*lpos.w;
  float t   = length(rv.xyz);
  rv.xyz   *= (1.0/t);
  rv.w      = 1.0 / dot( vec3(1,t,t*t),
                         vec3(gl_LightSource[5].constantAttenuation,
                              gl_LightSource[5].linearAttenuation,
                              gl_LightSource[5].quadraticAttenuation) );
  return rv;
}
vec4 lightPosAndAttenuation6(in vec4 vertex)
{
  vec4 lpos = gl_LightSource[6].position;
  vec4 rv;
  rv.xyz    = lpos.xyz - vertex.xyz*lpos.w;
  float t   = length(rv.xyz);
  rv.xyz   *= (1.0/t);
  rv.w      = 1.0 / dot( vec3(1,t,t*t),
                         vec3(gl_LightSource[6].constantAttenuation,
                              gl_LightSource[6].linearAttenuation,
                              gl_LightSource[6].quadraticAttenuation) );
  return rv;
}
vec4 lightPosAndAttenuation7(in vec4 vertex)
{
  vec4 lpos = gl_LightSource[7].position;
  vec4 rv;
  rv.xyz    = lpos.xyz - vertex.xyz*lpos.w;
  float t   = length(rv.xyz);
  rv.xyz   *= (1.0/t);
  rv.w      = 1.0 / dot( vec3(1,t,t*t),
                         vec3(gl_LightSource[7].constantAttenuation,
                              gl_LightSource[7].linearAttenuation,
                              gl_LightSource[7].quadraticAttenuation) );
  return rv;
}

void lighting2(in vec4 vertex, in vec3 refl, in vec3 normal, inout vec4 pc, inout vec4 sc)
{
  vec4  lpatt  = lightPosAndAttenuation2(vertex);
  float NdotL = dot( lpatt.xyz, normal );
  float RdotL = dot( lpatt.xyz, refl );
  pc += lpatt.w*(  gl_FrontMaterial.ambient * gl_LightSource[2].ambient
                 + max(0.0, NdotL) * gl_LightSource[2].diffuse * gl_FrontMaterial.diffuse ); 
  sc += lpatt.w*(  pow( max(0.0, RdotL) , max(1.0,gl_FrontMaterial.shininess) ) * selfshadowStep(NdotL)
                 * gl_LightSource[2].specular * gl_FrontMaterial.specular );
}
void lighting3(in vec4 vertex, in vec3 refl, in vec3 normal, inout vec4 pc, inout vec4 sc)
{
  vec4  lpatt  = lightPosAndAttenuation3(vertex);
  float NdotL = dot( lpatt.xyz, normal );
  float RdotL = dot( lpatt.xyz, refl );
  pc += lpatt.w*(  gl_FrontMaterial.ambient * gl_LightSource[3].ambient
                 + max(0.0, NdotL) * gl_LightSource[3].diffuse * gl_FrontMaterial.diffuse ); 
  sc += lpatt.w*(  pow( max(0.0, RdotL) , max(1.0,gl_FrontMaterial.shininess) ) * selfshadowStep(NdotL)
                 * gl_LightSource[3].specular * gl_FrontMaterial.specular );
}
void lighting4(in vec4 vertex, in vec3 refl, in vec3 normal, inout vec4 pc, inout vec4 sc)
{
  vec4  lpatt  = lightPosAndAttenuation4(vertex);
  float NdotL = dot( lpatt.xyz, normal );
  float RdotL = dot( lpatt.xyz, refl );
  pc += lpatt.w*(  gl_FrontMaterial.ambient * gl_LightSource[4].ambient
                 + max(0.0, NdotL) * gl_LightSource[4].diffuse * gl_FrontMaterial.diffuse ); 
  sc += lpatt.w*(  pow( max(0.0, RdotL) , max(1.0,gl_FrontMaterial.shininess) ) * selfshadowStep(NdotL)
                 * gl_LightSource[4].specular * gl_FrontMaterial.specular );
}
void lighting5(in vec4 vertex, in vec3 refl, in vec3 normal, inout vec4 pc, inout vec4 sc)
{
  vec4  lpatt  = lightPosAndAttenuation5(vertex);
  float NdotL = dot( lpatt.xyz, normal );
  float RdotL = dot( lpatt.xyz, refl );
  pc += lpatt.w*(  gl_FrontMaterial.ambient * gl_LightSource[5].ambient
                 + max(0.0, NdotL) * gl_LightSource[5].diffuse * gl_FrontMaterial.diffuse ); 
  sc += lpatt.w*(  pow( max(0.0, RdotL) , max(1.0,gl_FrontMaterial.shininess) ) * selfshadowStep(NdotL)
                 * gl_LightSource[5].specular * gl_FrontMaterial.specular );
}
void lighting6(in vec4 vertex, in vec3 refl, in vec3 normal, inout vec4 pc, inout vec4 sc)
{
  vec4  lpatt  = lightPosAndAttenuation6(vertex);
  float NdotL = dot( lpatt.xyz, normal );
  float RdotL = dot( lpatt.xyz, refl );
  pc += lpatt.w*(  gl_FrontMaterial.ambient * gl_LightSource[6].ambient
                 + max(0.0, NdotL) * gl_LightSource[6].diffuse * gl_FrontMaterial.diffuse ); 
  sc += lpatt.w*(  pow( max(0.0, RdotL) , max(1.0,gl_FrontMaterial.shininess) ) * selfshadowStep(NdotL)
                 * gl_LightSource[6].specular * gl_FrontMaterial.specular );
}
void lighting7(in vec4 vertex, in vec3 refl, in vec3 normal, inout vec4 pc, inout vec4 sc)
{
  vec4  lpatt  = lightPosAndAttenuation7(vertex);
  float NdotL = dot( lpatt.xyz, normal );
  float RdotL = dot( lpatt.xyz, refl );
  pc += lpatt.w*(  gl_FrontMaterial.ambient * gl_LightSource[7].ambient
                 + max(0.0, NdotL) * gl_LightSource[7].diffuse * gl_FrontMaterial.diffuse ); 
  sc += lpatt.w*(  pow( max(0.0, RdotL) , max(1.0,gl_FrontMaterial.shininess) ) * selfshadowStep(NdotL)
                 * gl_LightSource[7].specular * gl_FrontMaterial.specular );
}

void main() 
{
  // Compute position, eye-to-object direction and normalized world-space normal
  vec4 position = gl_ModelViewMatrix * gl_Vertex;
  vec3 eyetopos = normalize(position.xyz);
  vec3 normal   = normalize(gl_NormalMatrix * gl_Normal);
  vec3 tangent  = normalize(gl_NormalMatrix * gl_MultiTexCoord2.xyz);
  vec3 binormal = cross(tangent, normal) * sign(gl_MultiTexCoord2.w);
  // Load varyings
  gl_TexCoord[0] = gl_MultiTexCoord0;
  gl_TexCoord[1].xyz = normal;
  gl_TexCoord[2].xyz = tangent;
  gl_TexCoord[3].xyz = binormal;
  gl_TexCoord[4].xyz = -eyetopos;
  gl_TexCoord[5] = lightPosAndSize0(position);
  gl_TexCoord[6] = lightPosAndSize1(position);
  gl_TexCoord[1].w =
  gl_TexCoord[2].w =
  gl_TexCoord[3].w =
  gl_TexCoord[4].w = 0.0;
  gl_TexCoord[7] = position;
  // set primary color to the emissive material properties
  vec4 pc = gl_FrontMaterial.emission;
  vec4 sc = vec4(0.0);
  vec3 refl     = reflect( eyetopos, normal );
  if (max_light_enabled >= 2)
  {
    if (light_enabled[2] != 0) lighting2(position, refl, normal, pc, sc);
    if (light_enabled[3] != 0) lighting3(position, refl, normal, pc, sc);
    if (light_enabled[4] != 0) lighting4(position, refl, normal, pc, sc);
    if (light_enabled[5] != 0) lighting5(position, refl, normal, pc, sc);
    if (light_enabled[6] != 0) lighting6(position, refl, normal, pc, sc);
    if (light_enabled[7] != 0) lighting7(position, refl, normal, pc, sc);
  }
  // Need this instead of ftransform() for invariance
  gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
  gl_FrontColor = gl_BackColor = pc;
  gl_FrontSecondaryColor = gl_BackSecondaryColor = sc;
}

