uniform int light_enabled[gl_MaxLights];
uniform int max_light_enabled;
varying vec4 tc0,tc1;
//varying vec4 tc1,tc2,tc3,tc4,tc5,tc6,tc7;
void main() {

  vec4 position=gl_ModelViewMatrix*gl_Vertex;
  vec3 eyetopos=normalize(position.xyz/position.w);//find the direction from eye to object
  vec3 normal = normalize(gl_NormalMatrix * gl_Normal);//normalize the normal in world space
  tc0.xy=gl_MultiTexCoord0.xy;
  //tc7=gl_MultiTexCoord0*detail0Plane;//detail texture
  //tc6=gl_Vertex*detail1Plane;//detail texture
  tc1.xyz=normal;
  //tc4.xyz=-eyetopos;//direction from vertex to eye
  vec3 forward=gl_NormalMatrix*vec3(0.01,.01,1);//cheat use forward of ship to compute tangent
  vec3 binormal=normalize(cross(forward,normal));//gramm schmitt orthonormalization process
  vec3 tangent=normalize(cross(binormal,normal));
  //  tc2.xyz=tangent;
  //  tc3.xyz=binormal;
  tc0.zw=position.xy/position.w;
  tc1.w=position.z/position.w;
  //tc5.xyz=normalize(gl_LightSource[0].position.xyz*position.w-position.xyz*gl_LightSource[0].position.w);//find the direction of the vertex to the light...if not directional position.w==1
  //tc2.w=tc3.w=tc4.w=tc5.w=tc1.w=0.0;
  ///set primary color to the front light[0] ambient and light model ambient + emissive material properties
  vec4 pc=gl_FrontLightProduct[0].ambient+gl_FrontLightModelProduct.sceneColor;
  vec4 sc=vec4(0);
  for (int li=1;li<4;++li) {//computed in engine
    if (true) {//only compute for enabled lights
    //do per vertex lighting for lights 1,2,3,4,5,6,7+
      vec3 lightvec=gl_LightSource[li].position.xyz*position.w-position.xyz*gl_LightSource[li].position.w;
      float dist=length(lightvec);
      vec4 att = 1.0 / (gl_LightSource[li].constantAttenuation +
  	               gl_LightSource[li].linearAttenuation * vec4(dist) +
	               gl_LightSource[li].quadraticAttenuation * vec4(dist * dist));
      lightvec=lightvec/dist;
      vec3 halfangle=lightvec-eyetopos;
      halfangle=halfangle/length(halfangle);
      pc+=(att*(gl_FrontMaterial.ambient*(gl_LightSource[li].ambient)
        + max(dot(normal,lightvec),0.0)*gl_LightSource[li].diffuse*gl_FrontMaterial.diffuse))*(light_enabled[li]!=0?1.0:0.0);
      sc+=(light_enabled[li]!=0?1.0:0.0)*att*gl_FrontMaterial.specular*gl_LightSource[li].specular*pow(max(dot(normal,halfangle),0.0),gl_FrontMaterial.shininess);
    }
  }
//FIXME this may be better served as an ftransform--but I figure this will get more opts in the future
  gl_Position=ftransform();//gl_ModelViewProjectionMatrix*gl_Vertex;
  gl_FrontColor=pc;
  gl_FrontSecondaryColor=sc;
}