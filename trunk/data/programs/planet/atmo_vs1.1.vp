uniform vec4 fAtmosphereExtrusion;

varying vec3 varTSView;
varying vec3 varTSLight;
varying vec3 varWSNormal;

uniform vec4 light_size[gl_MaxLights];

vec4 lightPosAndSize0(in vec4 vertex)
{
  vec4 lpos = gl_LightSource[0].position;
  vec4 rv;
  rv.xyz    = lpos.xyz - vertex.xyz*lpos.w;
  rv.w      = light_size[0].z;
  return rv;
}

float lightAtt0(in vec4 lightpos)
{
  float t = length(lightpos);
  return 1.0 / dot( vec3(1.0,t,t*t),
                    vec3(gl_LightSource[0].constantAttenuation,
                         gl_LightSource[0].linearAttenuation,
                         gl_LightSource[0].quadraticAttenuation) );
}

void main()
{
   // Compute position, eye-to-object direction and normalized world-space normal
   vec4 extrudedPosition = gl_Vertex + vec4(normalize(gl_Normal.xyz),0) * fAtmosphereExtrusion.x;
   vec3 normal   = normalize(gl_NormalMatrix * gl_Normal);
   vec3 tangent  = normalize(gl_NormalMatrix * gl_MultiTexCoord2.xyz);
   vec3 binormal = cross(tangent, normal) * sign(gl_MultiTexCoord2.w);
   
   // Extrude sphere
   vec4 position = gl_ModelViewMatrix * extrudedPosition;
   
   vec3 eyetopos = normalize(position.xyz);
   vec4 rlightpos = lightPosAndSize0(position);
   vec4 lightpos = normalize(rlightpos);
   
   // TS view vector
   varTSView.x = dot( tangent, -eyetopos );
   varTSView.y = dot( binormal, -eyetopos );
   varTSView.z = dot( normal, -eyetopos );
   
   // TS light posision
   varTSLight.x = dot( tangent, lightpos.xyz );
   varTSLight.y = dot( binormal, lightpos.xyz );
   varTSLight.z = dot( normal, lightpos.xyz );
   
   // WS normal
   varWSNormal = normal;
   
   // Load varyings
   gl_TexCoord[0] = gl_MultiTexCoord0;
   
   // set primary color to the emissive material properties
   vec4 pc = gl_FrontMaterial.emission;
   vec4 sc = vec4(0.0);
   pc.a = gl_FrontMaterial.diffuse.a;
   
   float att = lightAtt0(rlightpos);
   pc.rgb += gl_FrontMaterial.diffuse.rgb * gl_LightSource[0].diffuse.rgb * att;
   
   // Need this instead of ftransform() for invariance
   gl_Position = gl_ModelViewProjectionMatrix * extrudedPosition;
   gl_FrontColor = gl_BackColor = pc;
   gl_FrontSecondaryColor = gl_BackSecondaryColor = sc;
}


