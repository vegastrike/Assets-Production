#include "gas_giants_params.h"
#include "../config.h"
#include "../stdlib_vp.h"

#define outCloudCoord gl_TexCoord[0]
#define outGroundCoord gl_TexCoord[1]
#define outNoiseCoord gl_TexCoord[2]

#define varTSView gl_TexCoord[3]

uniform float fTime;

float soffs(float lim, float x)
{
  return x + ((x>=0.0)?lim:-lim);
}

vec2 shadowExtrude(in vec2 texcoord, in vec3 direction, float mult)
{
  return texcoord + direction.xy * fAtmosphereExtrusion.x * fShadowRelHeight.x / soffs(0.01,direction.z) * mult;
}

void main()
{
   // Compute position, eye-to-object direction and normalized world-space normal
   vec4 extrudedPosition = gl_Vertex + vec4(normalize(gl_Normal.xyz),0) * fAtmosphereExtrusion.x * fShadowRelHeight.x * fvCloudLayers.x;
   vec3 normal   = normalize(gl_NormalMatrix * gl_Normal);
   vec3 tangent  = normalize(gl_NormalMatrix * gl_MultiTexCoord2.xyz);
   vec3 binormal = cross(tangent, normal) * sign(gl_MultiTexCoord2.w);
   
   // Extrude sphere
   vec4 position = gl_ModelViewMatrix * extrudedPosition;
   vec3 eyetopos = normalize(position.xyz);
   
   // TS view vector
   varTSView.x = dot( tangent, -eyetopos );
   varTSView.y = dot( binormal, -eyetopos );
   varTSView.z = dot( normal, -eyetopos );
   
   // Load varyings
   float layerThickness = fvCloudLayers.w / max(0.001,fvCloudLayers.x + 1.0 / fvCloudLayerScales.x);
   outCloudCoord       = gl_MultiTexCoord0 + fTime*fvCloudLayerDrift.xyxy;
   outNoiseCoord       = gl_MultiTexCoord0 - fTime*fvCloudLayerDrift.xyxy;
   outGroundCoord      = shadowExtrude(outCloudCoord.xy, varTSView.xyz, layerThickness).xyxy;
   
   // set primary color to the emissive material properties
   vec4 pc;
   pc.rgb = vec3(0.0);
   pc.a = fvCloudColor.a * fCloudLayerDensity;
   
   // Need this instead of ftransform() for invariance
   gl_Position = gl_ModelViewProjectionMatrix * extrudedPosition;
   gl_FrontColor = gl_BackColor = pc;
}



