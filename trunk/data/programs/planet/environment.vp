#include "earth_params.h"
#include "../stdlib_vp.h"

uniform float fTime;


float soffs(float lim, float x)
{
   return x + ((x>=0.0)?lim:-lim);
}

vec2 shadowExtrude(in vec2 texcoord, in vec3 direction)
{
   return texcoord - direction.xy * fAtmosphereExtrusion.x * fvCloudLayerDrift_ShadowRelHeight.w / soffs(0.01,direction.z);
}

void main() 
{
  // Compute position, eye-to-object direction and normalized world-space normal
  vec4 position = gl_ModelViewMatrix * gl_Vertex;
  vec3 eyetopos = normalize(position.xyz);
  vec3 normal   = normalize(gl_NormalMatrix * gl_Normal);
  vec3 tangent  = normalize(gl_NormalMatrix * gl_MultiTexCoord2.xyz);
  vec3 binormal = cross(tangent, normal) * sign(gl_MultiTexCoord2.w);
  vec3 reflection  = normalize(reflect(eyetopos,normal));
  
  // Compute tangentspace reflection vector
  vec3 tsreflection;
  tsreflection.x = dot(reflection, tangent);
  tsreflection.y = dot(reflection, binormal);
  tsreflection.z = dot(reflection, normal);
  
  // Load varyings
  gl_TexCoord[0] = gl_MultiTexCoord0;
  gl_TexCoord[1].xyz = normal;
  gl_TexCoord[1].w = 0.0;
  gl_TexCoord[2] = lightPosAndSize0(position);
  gl_TexCoord[3].xyz = -eyetopos;
  gl_TexCoord[3].w = 0.0;
  gl_TexCoord[4].zw = gl_MultiTexCoord0.xy + fTime*fvCloudLayerDrift_ShadowRelHeight.xy;
  gl_TexCoord[4].xy = shadowExtrude(gl_TexCoord[4].zw, tsreflection);
  gl_TexCoord[5].xy = shadowExtrude(gl_MultiTexCoord0.xy, tsreflection);
  
  // set primary color to the emissive material properties
  vec4 pc = gl_FrontMaterial.diffuse;
  vec4 sc = gl_FrontMaterial.specular;

  // Need this instead of ftransform() for invariance
  gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
  gl_FrontColor = gl_BackColor = pc;
  gl_FrontSecondaryColor = gl_BackSecondaryColor = sc;
}

